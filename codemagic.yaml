workflows:
  release-build:
    instance_type: linux
    environment:
      java: 17
      android_signing:
        - keystore_file
      groups:
        - google_credentials
        - production
    triggering:
      events:
        - push
      branch_patterns:
        - pattern: 'release'
          include: true
          source: true
    scripts:
      - name: Restore firebase info
        script: echo -n "$FIREBASE_INFO" > ./app/google-services.json
      - name: Set up key.properties
        script: |
          cat >> "$CM_BUILD_DIR/local.properties" <<EOF
          keystore.storepwd=$CM_KEYSTORE_PASSWORD
          keystore.keypwd=$CM_KEY_PASSWORD
          keystore.alias=$CM_KEY_ALIAS
          keystore.file=$CM_KEYSTORE_PATH
          EOF
      - name: Set up script
        script: chmod +x ./gradlew
      - name: Build Android Production Release
        script: |
          #!/bin/bash
          LATEST_GOOGLE_PLAY_BUILD_NUMBER=$(google-play get-latest-build-number --package-name "${PACKAGE_NAME}")
          if [ -z $LATEST_GOOGLE_PLAY_BUILD_NUMBER ];then
            UPDATED_BUILD_NUMBER=$BUILD_NUMBER
          else
            UPDATED_BUILD_NUMBER=$(($LATEST_GOOGLE_PLAY_BUILD_NUMBER + 1))
          fi
          ./gradlew bundleProdRelease -PversionCode=${UPDATED_BUILD_NUMBER} -PendOfVersionName=${UPDATED_BUILD_NUMBER}
    artifacts:
      - app/build/**/outputs/bundle/**/*.aab
    publishing:
      slack:
        channel: '#feed'
        notify_on_build_start: false
        notify:
          success: true
          failure: true
      google_play:
        credentials: $GCLOUD_SERVICE_ACCOUNT_CREDENTIALS
        track: internal
        submit_as_draft: true  # To not receive a notification when a build fails
  e2e-test:
    instance_type: linux
    environment:
      java: 17
      android_signing:
        - keystore_file
      groups:
        - aws_credentials
        - aws_device_farm
        - development
    triggering:
      events:
        - pull_request
      branch_patterns:
        - pattern: 'release'
          include: true
          source: false
    scripts:
      - name: Restore firebase info
        script: echo -n "$FIREBASE_INFO" > ./app/google-services.json
      - name: Set up script
        script: chmod +x ./gradlew
      - name: Build Dev Debug Apk
        script: |
          #!/bin/bash
          set -ex
          env
          ./gradlew assembleDevDebug
          DEV_DEBUG_APK_FILE=$(find app/build/outputs/apk/dev/** -name "*.apk" | head -n 1)
          APP_UPLOAD_OUTPUT=$(aws devicefarm create-upload --project-arn ${DEVICE_FARM_PROJECT_ARN} --name $(date +%Y%m%d%H%M)-$(basename ${DEV_DEBUG_APK_FILE}) --type ANDROID_APP --output json)
          curl -T ${DEV_DEBUG_APK_FILE} $(jq -r .upload.url <(echo ${APP_UPLOAD_OUTPUT}))
          echo "DEV_DEBUG_APK_ARN=$(jq -r .upload.arn <(echo ${APP_UPLOAD_OUTPUT}))" >> $CM_ENV
      - name: Build test package
        script: |
          #!/bin/bash
          set -ex
          env
          ./gradlew assembleAndroidTest
          ANDROID_TEST_DEBUG_APK_FILE=$(find app/build/outputs/apk/androidTest/** -name "*.apk" | head -n 1)
          TEST_PACKAGE_UPLOAD_OUTPUT=$(aws devicefarm create-upload --project-arn ${DEVICE_FARM_PROJECT_ARN} --name $(date +%Y%m%d%H%M)-$(basename ${ANDROID_TEST_DEBUG_APK_FILE}) --type INSTRUMENTATION_TEST_PACKAGE --output json)
          curl -T ${ANDROID_TEST_DEBUG_APK_FILE} $(jq -r .upload.url <(echo ${TEST_PACKAGE_UPLOAD_OUTPUT}))
          echo "TEST_PACKAGE_APK_ARN=$(jq -r .upload.arn <(echo ${TEST_PACKAGE_UPLOAD_OUTPUT}))" >> $CM_ENV
      - name: Upload test spec
        script: |
          #!/bin/bash
          set -ex
          env
          TEST_SPEC_UPLOAD_OUTPUT=$(aws devicefarm create-upload --project-arn ${DEVICE_FARM_PROJECT_ARN} --name testspec.yaml --type INSTRUMENTATION_TEST_SPEC --output json)
          curl -T .devicefarm/testspec.yaml $(jq -r .upload.url <(echo ${TEST_SPEC_UPLOAD_OUTPUT}))
          echo "TEST_SPEC_ARN=$(jq -r .upload.arn <(echo ${TEST_SPEC_UPLOAD_OUTPUT}))" >> $CM_ENV
      - name: Upload orchestrator and test services apk
        script: |
          #!/bin/bash
          set -ex
          env
          ./gradlew app:downloadAndroidUtilTestLibs
          ORCHESTRATOR_APK_FILE=$(find app/build/tmp/** -name "*orchestrator*.apk" | head -n 1)
          TEST_SERVICE_APK_FILE=$(find app/build/tmp/** -name "*test-services*.apk" | head -n 1)
          ORCHESTRATOR_UPLOAD_OUTPUT=$(aws devicefarm create-upload --project-arn ${DEVICE_FARM_PROJECT_ARN} --name $(date +%Y%m%d%H%M)-$(basename ${ORCHESTRATOR_APK_FILE}) --type ANDROID_APP --output json)
          curl -T ${ORCHESTRATOR_APK_FILE} $(jq -r .upload.url <(echo ${ORCHESTRATOR_UPLOAD_OUTPUT}))
          echo "DEVICE_FARM_ORCHESTRATOR_ARN=$(jq -r .upload.arn <(echo ${ORCHESTRATOR_UPLOAD_OUTPUT}))" >> $CM_ENV
          TEST_SERVICE_UPLOAD_OUTPUT=$(aws devicefarm create-upload --project-arn ${DEVICE_FARM_PROJECT_ARN} --name $(date +%Y%m%d%H%M)-$(basename ${TEST_SERVICE_APK_FILE}) --type ANDROID_APP --output json)
          curl -T ${TEST_SERVICE_APK_FILE} $(jq -r .upload.url <(echo ${TEST_SERVICE_UPLOAD_OUTPUT}))
          echo "DEVICE_FARM_TEST_SERVICE_ARN=$(jq -r .upload.arn <(echo ${TEST_SERVICE_UPLOAD_OUTPUT}))" >> $CM_ENV
      - name: Exec E2E Test
        script: |
          #!/bin/bash
          set -ex
          env
          # 各アップロード直後に aws devicefarm schedule-run を実行するとエラーになることがあるので待機させる
          sleep 10
          SCHEDULE_NAME=$(date +%Y%m%d%H%M)
          aws devicefarm schedule-run --project-arn ${DEVICE_FARM_PROJECT_ARN} --app-arn ${DEV_DEBUG_APK_ARN} --device-pool-arn  ${DEVICE_FARM_DEVICE_POOL_ARN} --name ${SCHEDULE_NAME} --test type=INSTRUMENTATION,testPackageArn=${TEST_PACKAGE_APK_ARN},testSpecArn=${TEST_SPEC_ARN} --configuration auxiliaryApps=[${DEVICE_FARM_ORCHESTRATOR_ARN},${DEVICE_FARM_TEST_SERVICE_ARN}]
  dev-release-build:
    instance_type: linux
    environment:
      java: 17
      groups:
        - deploygate_credentials
        - google_credentials
        - development
    triggering:
      events:
        - push
      branch_patterns:
        - pattern: '*'
          include: true
          source: true
        - pattern: 'release'
          include: false
          source: false
        - pattern: 'main'
          include: false
          source: false
    scripts:
      - name: Restore firebase info
        script: echo -n "$FIREBASE_INFO" > ./app/google-services.json
      - name: Set up script
        script: chmod +x ./gradlew
      - name: Unit test
        script: ./gradlew testDevDebugUnitTest
      - name: Build Android and Deploy Development Release Aab
        script: |
          #!/bin/bash
          LATEST_GOOGLE_PLAY_BUILD_NUMBER=$(google-play get-latest-build-number --package-name "${PACKAGE_NAME}")
          if [ -z $LATEST_GOOGLE_PLAY_BUILD_NUMBER ];then
          UPDATED_BUILD_NUMBER=$BUILD_NUMBER
          else
          UPDATED_BUILD_NUMBER=$(($LATEST_GOOGLE_PLAY_BUILD_NUMBER + 1))
          fi
          ./gradlew uploadDeployGateAabDevRelease -PversionCode=${UPDATED_BUILD_NUMBER} -PendOfVersionName=${UPDATED_BUILD_NUMBER}
    artifacts:
      - app/build/**/outputs/bundle/**/*.aab
    publishing:
      slack:
        channel: '#feed'
        notify_on_build_start: false
        notify:
          success: true # To not receive a notification when a build succeeds
          failure: true # To not receive a notification when a build fails
